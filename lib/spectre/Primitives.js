class Primitive {
}
exports.Primitive = Primitive;
class SimplePrimitive extends Primitive {
    constructor(getterFunc, setterFunc) {
        super();
        this.getterFunc = getterFunc;
        this.setterFunc = setterFunc;
    }
    getGetterFunc() {
        return (address, length) => {
            return this.getterFunc(address, length);
        };
    }
    getSetterFunc() {
        return (address, value, length) => {
            return this.setterFunc(address, value, length);
        };
    }
}
exports.POINTER = new SimplePrimitive(Memory.readPointer, Memory.writePointer);
exports.FLOAT = new SimplePrimitive(Memory.readFloat, Memory.writeFloat);
exports.DOUBLE = new SimplePrimitive(Memory.readDouble, Memory.writeDouble);
exports.INT8 = new SimplePrimitive(Memory.readS8, Memory.writeS8);
exports.UINT8 = new SimplePrimitive(Memory.readU8, Memory.writeU8);
exports.INT16 = new SimplePrimitive(Memory.readS16, Memory.writeS16);
exports.UINT16 = new SimplePrimitive(Memory.readU16, Memory.writeU16);
exports.INT32 = new SimplePrimitive(Memory.readS32, Memory.writeS32);
exports.UINT32 = new SimplePrimitive(Memory.readU32, Memory.writeU32);
exports.BOOL8 = new SimplePrimitive(Memory.readU8, Memory.writeU8);
exports.UNKNOWN8 = new SimplePrimitive(Memory.readU8, Memory.writeU8);
exports.UNKNOWN16 = new SimplePrimitive(Memory.readU16, Memory.writeU16);
exports.UNKNOWN32 = new SimplePrimitive(Memory.readU32, Memory.writeU32);
exports.PSTRING_UTF8 = new SimplePrimitive((pointer, length = -1) => {
    return Memory.readUtf8String(pointer, length);
}, (pointer, value, length = -1) => {
    Memory.writePointer(pointer, Memory.allocUtf8String(value.substring(0, length)));
});

//# sourceMappingURL=data:application/json;base64,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QyxFQUFFLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUNyRixDQUFDLENBQUMsQ0FBQyIsImZpbGUiOiJQcmltaXRpdmVzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLy8vIDxyZWZlcmVuY2UgcGF0aD1cIkZyaWRhLnRzXCIgLz5cclxuXHJcbmltcG9ydCB7TmF0aXZlR2V0dGVyRnVuY30gZnJvbSAnLi9OYXRpdmVHZXR0ZXJGdW5jJztcclxuaW1wb3J0IHtOYXRpdmVTZXR0ZXJGdW5jfSBmcm9tICcuL05hdGl2ZVNldHRlckZ1bmMnO1xyXG5cclxuZXhwb3J0IGFic3RyYWN0IGNsYXNzIFByaW1pdGl2ZSB7XHJcbiAgICBhYnN0cmFjdCBnZXRHZXR0ZXJGdW5jKCk6IE5hdGl2ZUdldHRlckZ1bmM7XHJcbiAgICBhYnN0cmFjdCBnZXRTZXR0ZXJGdW5jKCk6IE5hdGl2ZVNldHRlckZ1bmM7XHJcbn1cclxuXHJcbmNsYXNzIFNpbXBsZVByaW1pdGl2ZSBleHRlbmRzIFByaW1pdGl2ZSB7XHJcbiAgICBnZXR0ZXJGdW5jOiBhbnk7XHJcbiAgICBzZXR0ZXJGdW5jOiBhbnk7XHJcblxyXG4gICAgY29uc3RydWN0b3IoZ2V0dGVyRnVuYywgc2V0dGVyRnVuYykge1xyXG4gICAgICAgIHN1cGVyKCk7XHJcbiAgICAgICAgICAgIHRoaXMuZ2V0dGVyRnVuYyA9IGdldHRlckZ1bmM7XHJcbiAgICAgICAgICAgIHRoaXMuc2V0dGVyRnVuYyA9IHNldHRlckZ1bmM7IFxyXG4gICAgfVxyXG4gICAgcHVibGljIGdldEdldHRlckZ1bmMoKTogTmF0aXZlR2V0dGVyRnVuYyB7XHJcbiAgICAgICAgcmV0dXJuIChhZGRyZXNzOiBOYXRpdmVQb2ludGVyLCBsZW5ndGg6IG51bWJlcikgPT4ge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5nZXR0ZXJGdW5jKGFkZHJlc3MsIGxlbmd0aCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgcHVibGljIGdldFNldHRlckZ1bmMoKTogTmF0aXZlU2V0dGVyRnVuYyB7XHJcbiAgICAgICAgcmV0dXJuIChhZGRyZXNzOiBOYXRpdmVQb2ludGVyLCB2YWx1ZTogYW55LCBsZW5ndGg6IG51bWJlcikgPT4ge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5zZXR0ZXJGdW5jKGFkZHJlc3MsIHZhbHVlLCBsZW5ndGgpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG5cclxuZXhwb3J0IHZhciBQT0lOVEVSOiBQcmltaXRpdmUgPSBuZXcgU2ltcGxlUHJpbWl0aXZlKE1lbW9yeS5yZWFkUG9pbnRlciwgTWVtb3J5LndyaXRlUG9pbnRlcik7XHJcblxyXG5leHBvcnQgdmFyIEZMT0FUOiBQcmltaXRpdmUgPSBuZXcgU2ltcGxlUHJpbWl0aXZlKE1lbW9yeS5yZWFkRmxvYXQsIE1lbW9yeS53cml0ZUZsb2F0KTtcclxuZXhwb3J0IHZhciBET1VCTEU6IFByaW1pdGl2ZSA9IG5ldyBTaW1wbGVQcmltaXRpdmUoTWVtb3J5LnJlYWREb3VibGUsIE1lbW9yeS53cml0ZURvdWJsZSk7XHJcblxyXG5leHBvcnQgdmFyIElOVDg6IFByaW1pdGl2ZSA9IG5ldyBTaW1wbGVQcmltaXRpdmUoTWVtb3J5LnJlYWRTOCwgTWVtb3J5LndyaXRlUzgpO1xyXG5leHBvcnQgdmFyIFVJTlQ4IDogUHJpbWl0aXZlID0gbmV3IFNpbXBsZVByaW1pdGl2ZShNZW1vcnkucmVhZFU4LCBNZW1vcnkud3JpdGVVOCk7XHJcbmV4cG9ydCB2YXIgSU5UMTY6IFByaW1pdGl2ZSA9IG5ldyBTaW1wbGVQcmltaXRpdmUoTWVtb3J5LnJlYWRTMTYsIE1lbW9yeS53cml0ZVMxNik7XHJcbmV4cG9ydCB2YXIgVUlOVDE2IDogUHJpbWl0aXZlID0gbmV3IFNpbXBsZVByaW1pdGl2ZShNZW1vcnkucmVhZFUxNiwgTWVtb3J5LndyaXRlVTE2KTtcclxuZXhwb3J0IHZhciBJTlQzMjogUHJpbWl0aXZlID0gbmV3IFNpbXBsZVByaW1pdGl2ZShNZW1vcnkucmVhZFMzMiwgTWVtb3J5LndyaXRlUzMyKTtcclxuZXhwb3J0IHZhciBVSU5UMzIgOiBQcmltaXRpdmUgPSBuZXcgU2ltcGxlUHJpbWl0aXZlKE1lbW9yeS5yZWFkVTMyLCBNZW1vcnkud3JpdGVVMzIpO1xyXG5leHBvcnQgdmFyIEJPT0w4IDogUHJpbWl0aXZlID0gbmV3IFNpbXBsZVByaW1pdGl2ZShNZW1vcnkucmVhZFU4LCBNZW1vcnkud3JpdGVVOCk7XHJcblxyXG5leHBvcnQgdmFyIFVOS05PV044IDogUHJpbWl0aXZlID0gbmV3IFNpbXBsZVByaW1pdGl2ZShNZW1vcnkucmVhZFU4LCBNZW1vcnkud3JpdGVVOCk7XHJcbmV4cG9ydCB2YXIgVU5LTk9XTjE2IDogUHJpbWl0aXZlID0gbmV3IFNpbXBsZVByaW1pdGl2ZShNZW1vcnkucmVhZFUxNiwgTWVtb3J5LndyaXRlVTE2KTtcclxuZXhwb3J0IHZhciBVTktOT1dOMzIgOiBQcmltaXRpdmUgPSBuZXcgU2ltcGxlUHJpbWl0aXZlKE1lbW9yeS5yZWFkVTMyLCBNZW1vcnkud3JpdGVVMzIpO1xyXG5cclxuZXhwb3J0IHZhciBQU1RSSU5HX1VURjggOiBQcmltaXRpdmUgPSBuZXcgU2ltcGxlUHJpbWl0aXZlKFxyXG4gICAgKHBvaW50ZXIsIGxlbmd0aCA9IC0xKSA9PiB7XHJcbiAgICAgICAgcmV0dXJuIE1lbW9yeS5yZWFkVXRmOFN0cmluZyhwb2ludGVyLCBsZW5ndGgpO1xyXG4gICAgfSwgKHBvaW50ZXIsIHZhbHVlLCBsZW5ndGggPSAtMSkgPT4ge1xyXG4gICAgICAgIE1lbW9yeS53cml0ZVBvaW50ZXIocG9pbnRlciwgTWVtb3J5LmFsbG9jVXRmOFN0cmluZyh2YWx1ZS5zdWJzdHJpbmcoMCwgbGVuZ3RoKSkpO1xyXG4gICAgfSk7Il0sInNvdXJjZVJvb3QiOiIvc291cmNlLyJ9
