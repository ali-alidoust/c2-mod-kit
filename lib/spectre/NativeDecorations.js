const NativeGetterFunc_1 = require('./NativeGetterFunc');
const NativeSetterFunc_1 = require('./NativeSetterFunc');
const Primitives_1 = require('./Primitives');
function property(offset, type, writable = true, length = -1) {
    return function (target, key) {
        let getter;
        let setter;
        if (type instanceof Primitives_1.Primitive) {
            getter = type.getGetterFunc();
            setter = type.getSetterFunc();
        }
        else {
            getter = (address, length) => { return new type(address); };
            setter = (address, value, length) => { Memory.writePointer(address, value.selfPointer); };
        }
        if (!writable) {
            setter = (value) => { throw `Property "${key}" is read-only.`; };
        }
        if (delete target[key]) {
            Object.defineProperty(target, key, {
                get: NativeGetterFunc_1.NativeGetter(offset, getter, length),
                set: NativeSetterFunc_1.NativeSetter(offset, setter, length),
                enumerable: true
            });
        }
    };
}
exports.property = property;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIk5hdGl2ZURlY29yYXRpb25zLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUdBLG1DQUErQyxvQkFBb0IsQ0FBQyxDQUFBO0FBQ3BFLG1DQUErQyxvQkFBb0IsQ0FBQyxDQUFBO0FBQ3BFLDZCQUEwQixjQUFjLENBQUMsQ0FBQTtBQUV6QyxrQkFDSSxNQUFjLEVBQ2QsSUFBdUMsRUFDdkMsUUFBUSxHQUFZLElBQUksRUFDeEIsTUFBTSxHQUFXLENBQUMsQ0FBQztJQUNuQixNQUFNLENBQUMsVUFBVSxNQUFjLEVBQUUsR0FBVztRQUN4QyxJQUFJLE1BQXdCLENBQUM7UUFDN0IsSUFBSSxNQUF3QixDQUFDO1FBRTdCLEVBQUUsQ0FBQyxDQUFDLElBQUksWUFBWSxzQkFBUyxDQUFDLENBQUMsQ0FBQztZQUM1QixNQUFNLEdBQWUsSUFBSyxDQUFDLGFBQWEsRUFBRSxDQUFDO1lBQzNDLE1BQU0sR0FBZSxJQUFLLENBQUMsYUFBYSxFQUFFLENBQUM7UUFDL0MsQ0FBQztRQUFDLElBQUksQ0FBQyxDQUFDO1lBQ0osTUFBTSxHQUFHLENBQUMsT0FBTyxFQUFFLE1BQU0sT0FBTyxNQUFNLENBQUMsSUFBNEIsSUFBSyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFBO1lBQ3BGLE1BQU0sR0FBRyxDQUFDLE9BQU8sRUFBRSxLQUFLLEVBQUUsTUFBTSxPQUFPLE1BQU0sQ0FBQyxZQUFZLENBQUMsT0FBTyxFQUFFLEtBQUssQ0FBQyxXQUFXLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQTtRQUM3RixDQUFDO1FBRUQsRUFBRSxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDO1lBQ1osTUFBTSxHQUFHLENBQUMsS0FBSyxPQUFPLE1BQU0sYUFBYSxHQUFHLGlCQUFpQixDQUFBLENBQUMsQ0FBQyxDQUFDO1FBQ3BFLENBQUM7UUFFRCxFQUFFLENBQUMsQ0FBQyxPQUFPLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDckIsTUFBTSxDQUFDLGNBQWMsQ0FBQyxNQUFNLEVBQUUsR0FBRyxFQUFFO2dCQUMvQixHQUFHLEVBQUUsK0JBQVksQ0FBQyxNQUFNLEVBQUUsTUFBTSxFQUFFLE1BQU0sQ0FBQztnQkFDekMsR0FBRyxFQUFFLCtCQUFZLENBQUMsTUFBTSxFQUFFLE1BQU0sRUFBRSxNQUFNLENBQUM7Z0JBQ3pDLFVBQVUsRUFBRSxJQUFJO2FBQ25CLENBQUMsQ0FBQztRQUNQLENBQUM7SUFDTCxDQUFDLENBQUE7QUFDTCxDQUFDO0FBN0JlLGdCQUFRLFdBNkJ2QixDQUFBIiwiZmlsZSI6Ik5hdGl2ZURlY29yYXRpb25zLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLy8vIDxyZWZlcmVuY2UgcGF0aD1cIkZyaWRhLnRzXCIgLz5cclxuXHJcbmltcG9ydCB7IE5hdGl2ZU9iamVjdCB9IGZyb20gJy4vTmF0aXZlT2JqZWN0JztcclxuaW1wb3J0IHsgTmF0aXZlR2V0dGVyRnVuYywgTmF0aXZlR2V0dGVyIH0gZnJvbSAnLi9OYXRpdmVHZXR0ZXJGdW5jJztcclxuaW1wb3J0IHsgTmF0aXZlU2V0dGVyRnVuYywgTmF0aXZlU2V0dGVyIH0gZnJvbSAnLi9OYXRpdmVTZXR0ZXJGdW5jJztcclxuaW1wb3J0IHsgUHJpbWl0aXZlIH0gZnJvbSAnLi9QcmltaXRpdmVzJztcclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBwcm9wZXJ0eTxUIGV4dGVuZHMgTmF0aXZlT2JqZWN0PihcclxuICAgIG9mZnNldDogbnVtYmVyLFxyXG4gICAgdHlwZTogeyBuZXcgKGFkZHJlc3MpOiBUOyB9IHwgUHJpbWl0aXZlLFxyXG4gICAgd3JpdGFibGU6IGJvb2xlYW4gPSB0cnVlLFxyXG4gICAgbGVuZ3RoOiBudW1iZXIgPSAtMSk6IFByb3BlcnR5RGVjb3JhdG9yIHtcclxuICAgIHJldHVybiBmdW5jdGlvbiAodGFyZ2V0OiBPYmplY3QsIGtleTogc3RyaW5nKSB7XHJcbiAgICAgICAgbGV0IGdldHRlcjogTmF0aXZlR2V0dGVyRnVuYztcclxuICAgICAgICBsZXQgc2V0dGVyOiBOYXRpdmVTZXR0ZXJGdW5jO1xyXG5cclxuICAgICAgICBpZiAodHlwZSBpbnN0YW5jZW9mIFByaW1pdGl2ZSkge1xyXG4gICAgICAgICAgICBnZXR0ZXIgPSAoPFByaW1pdGl2ZT50eXBlKS5nZXRHZXR0ZXJGdW5jKCk7XHJcbiAgICAgICAgICAgIHNldHRlciA9ICg8UHJpbWl0aXZlPnR5cGUpLmdldFNldHRlckZ1bmMoKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBnZXR0ZXIgPSAoYWRkcmVzcywgbGVuZ3RoKSA9PiB7IHJldHVybiBuZXcgKDx7IG5ldyAoYWRkcmVzcyk6IFQ7IH0+dHlwZSkoYWRkcmVzcyk7IH1cclxuICAgICAgICAgICAgc2V0dGVyID0gKGFkZHJlc3MsIHZhbHVlLCBsZW5ndGgpID0+IHsgTWVtb3J5LndyaXRlUG9pbnRlcihhZGRyZXNzLCB2YWx1ZS5zZWxmUG9pbnRlcik7IH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmICghd3JpdGFibGUpIHtcclxuICAgICAgICAgICAgc2V0dGVyID0gKHZhbHVlKSA9PiB7IHRocm93IGBQcm9wZXJ0eSBcIiR7a2V5fVwiIGlzIHJlYWQtb25seS5gIH07XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAoZGVsZXRlIHRhcmdldFtrZXldKSB7XHJcbiAgICAgICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwge1xyXG4gICAgICAgICAgICAgICAgZ2V0OiBOYXRpdmVHZXR0ZXIob2Zmc2V0LCBnZXR0ZXIsIGxlbmd0aCksXHJcbiAgICAgICAgICAgICAgICBzZXQ6IE5hdGl2ZVNldHRlcihvZmZzZXQsIHNldHRlciwgbGVuZ3RoKSxcclxuICAgICAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWVcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59Il0sInNvdXJjZVJvb3QiOiIvc291cmNlLyJ9
